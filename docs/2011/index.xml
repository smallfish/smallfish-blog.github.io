<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2011s on smallfish&#39;s blog</title>
    <link>http://chenxiaoyu.org/2011/</link>
    <description>Recent content in 2011s on smallfish&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 29 Dec 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://chenxiaoyu.org/2011/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Rose</title>
      <link>http://chenxiaoyu.org/2011/12/29/the-rose/</link>
      <pubDate>Thu, 29 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/12/29/the-rose/</guid>
      <description>想了很久，很难给这篇跟技术无关的博客起一个满意的标题。刚好想起以前看过的一个视频《The Rose》，姑且凑合用吧。
其实用信乐团的《海阔天空》来当标题或许更为合适，歌词依旧如此犀利和伤感：
冷漠的人 谢谢你们曾经看轻我 让我不低头更精彩的活 … 海阔天空 狂风暴雨以后 转过头 对旧心酸一笑而过 随着时间的消逝，有些东西始终只是存在自己的回忆里，不管是美好还是伤感，始终那些都是值得。
或许，曾经有点苦涩，有点埋怨。而如今，回想起来，始终有着那么一丝丝的回味和惋惜。
清晰的记得，那是2005年的国庆前，穿越一个城市，冒着大雨，只是为了那一份为之着迷和幻想的工作。
在去南京之前，对于写程序而已，大部分时间只是在纸上模拟，代码只是流淌在自己的记忆体中。很顺利的拿到了那份工作，一呆就是四年半，接近五年的时间。
不知道五年对每个人意味着什么，得到或者失去，其实都不算什么，只是人生的一些经历而已。回忆起上上次五年，应该是自己上师范那会，十八到二十三岁，应该算是人生最年轻的阶段，得失？我不知道。而上次五年，或许算起来应该是人生中起步积累的阶段吧。
仔细想了想，印象里有很多记忆深刻的场景。比如，那个夏天，没有空调，没有风扇，几个男人，赤膊在公司加班写代码，解决线上服务器问题。那个冬天，喝完白酒，醉醺醺的去公司写了小半夜代码，早上起来检查竟然没有任何的错误。种种画面犹如电影镜头般清晰。
或许这些，都不太重要。只是我们自己在乎的太多，太把自己当回事。或许？只能是或许。
然后，一个个老员工都选择了离开。离开的原因有人会觉得是为了跳槽，是为了选择自己发展的空间，扪心自问，真是这样的吗？只是觉得那么的无奈，那么的难以言语。
聚会的时候还会经常聊起那些过去的事，过去的人。其实大家心里都清楚，为什么离开。
虽然离开这个做法，在现在看来是多么简单，多么不需要理由的事情。
但是，面对着自己陪伴成长，一步步发展起来的那份工作，谁舍得，谁愿意呢。
过去的对与错，已经不再重要。当然，我们什么都不是，真的什么都不是。
嗯，
祝福那些已经离开和即将离开的同事们，终点不是结束，只是下一个起点，一切都会好起来的。</description>
    </item>
    
    <item>
      <title>JSON 美化输出</title>
      <link>http://chenxiaoyu.org/2011/11/24/json-format/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/11/24/json-format/</guid>
      <description>经常会碰到一些返回 JSON 格式的应用，默认都是一大坨字一起显示，完全是虐待自己的眼睛。
比如以下JSON：
mac:~ smallfish$ curl http://127.0.0.1:8108/postgres [{&amp;#34;datname&amp;#34;:&amp;#34;postgres&amp;#34;,&amp;#34;datdba&amp;#34;:&amp;#34;10&amp;#34;,&amp;#34;encoding&amp;#34;:6,&amp;#34;datcollate&amp;#34;:&amp;#34;zh_CN.UTF-8&amp;#34;,&amp;#34;datctype&amp;#34;:&amp;#34;zh_CN.UTF-8&amp;#34;, &amp;#34;datistemplate&amp;#34;:false,&amp;#34;datallowconn&amp;#34;:true,&amp;#34;datconnlimit&amp;#34;:-1,&amp;#34;datlastsysoid&amp;#34;:&amp;#34;12172&amp;#34;,&amp;#34;datfrozenxid&amp;#34;:&amp;#34;985&amp;#34;, &amp;#34;dattablespace&amp;#34;:&amp;#34;1663&amp;#34;,&amp;#34;datacl&amp;#34;:null},{&amp;#34;datname&amp;#34;:&amp;#34;smallfish&amp;#34;,&amp;#34;datdba&amp;#34;:&amp;#34;16384&amp;#34;,&amp;#34;encoding&amp;#34;:6, &amp;#34;datcollate&amp;#34;:&amp;#34;zh_CN.UTF-8&amp;#34;,&amp;#34;datctype&amp;#34;:&amp;#34;zh_CN.UTF-8&amp;#34;,&amp;#34;datistemplate&amp;#34;:false,&amp;#34;datallowconn&amp;#34;:true, &amp;#34;datconnlimit&amp;#34;:-1,&amp;#34;datlastsysoid&amp;#34;:&amp;#34;12172&amp;#34;,&amp;#34;datfrozenxid&amp;#34;:&amp;#34;985&amp;#34;,&amp;#34;dattablespace&amp;#34;:&amp;#34;1663&amp;#34;,&amp;#34;datacl&amp;#34;:null}] 顺手 Google 了下，发现了两种浏览方式：命令行查看和浏览器查看。
一、浏览器查看方式，需要安装 Chrome 插件：JSONView。
二、命令行查看，需要安装 Python。
mac:~ smallfish$ curl http://127.0.0.1:8108/postgres | python -mjson.tool 
是不是美观很多了？</description>
    </item>
    
    <item>
      <title>Nginx Session 模块</title>
      <link>http://chenxiaoyu.org/2011/11/09/nginx-session/</link>
      <pubDate>Wed, 09 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/11/09/nginx-session/</guid>
      <description>上一篇《Nginx第三方模块》涉及了数据库、Memcached以及Lua的扩展，但是相对于Web开发是不是还缺点什么呢？答案是回话（Session）模块。
这里还是需要感谢一下@agentzh，已经封装好了encrypted-session模块。模块依赖ngx_devel_kit包。模块地址如下：
 ngx_devel_kit encrypted-session-nginx-module  编译很简单，类似如下：
./configure --prefix=/opt/nginx \  --add-module=../ngx_devel_kit \  --add-module=../encrypted-session-nginx-module 重新编译Nginx二进制，Nginx需要quit再启动。而普通配置更新则reload即可：
1. kill -HUP `cat /path/nginx/logs/nginx.pid` 2. /path/nginx/sbin/nginx -s reload 在测试之前，需要配置encrypted_session_key（长度32位）和encrypted_session_iv（长度16位）。
encrypted_session_key &amp;#34;abcdefghijklmnopqrstuvwxyz123456&amp;#34;; encrypted_session_iv &amp;#34;1234567812345678&amp;#34;; encrypted_session_expires 5; # 默认过期时间是1d（一天） 话不到多说，直接来读写示例：
 写入session，测试session名为name，值是smallfish。  location /session-write { set $name &amp;#39;smallfish&amp;#39;; set_encrypt_session $session_name $name; set_encode_base32 $session_name; add_header &amp;#34;Set-Cookie&amp;#34; &amp;#34;name=$session_name&amp;#34;; echo &amp;#34;write name: $session_name&amp;#34;; }  读取session，Nginx读取Cookie方式为：$cookie_xxx。xxx为cookie的名称。  location /session-read { set_decode_base32 $session_name $cookie_name; set_decrypt_session $name $session_name; echo &amp;#34;read name: $name&amp;#34;; } </description>
    </item>
    
    <item>
      <title>Nginx 第三方模块试用记</title>
      <link>http://chenxiaoyu.org/2011/10/30/nginx-modules/</link>
      <pubDate>Sun, 30 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/10/30/nginx-modules/</guid>
      <description>最近试用了几个@agentzh写的第三方Nginx模块，甚为愉悦，没想到在Nginx可以玩很多技巧和扩展，分享一下。
本文尝试的几个模块大概分为：
 echo memcached nginx lua  详细模块地址分别为：
 ngx_devel_kit https://github.com/simpl/ngx_devel_kit set-misc-nginx-module https://github.com/agentzh/set-misc-nginx-module memc-nginx-module https://github.com/agentzh/memc-nginx-module echo-nginx-module https://github.com/agentzh/echo-nginx-module lua-nginx-module https://github.com/chaoslawful/lua-nginx-module srcache-nginx-module https://github.com/agentzh/srcache-nginx-module drizzle-nginx-module https://github.com/chaoslawful/drizzle-nginx-module rds-json-nginx-module https://github.com/agentzh/rds-json-nginx-module  为了省事这里一股脑把上面的module全部下载好，一起编译。PS：如果更懒惰的可以尝试下openresty项目，它帮你打包好Nginx和一堆扩展模块，得感谢@agentzh。
这里编译和drizzle和lua模块，在编译Nginx之前需要设置一下这两个库的LIB和INCLUDE文件地址：
-- lua -- export LUA_LIB=/path/to/lua/lib export LUA_INC=/path/to/lua/include -- drizzle -- export LIBDRIZZLE_INC=/opt/drizzle/include/libdrizzle-1.0 export LIBDRIZZLE_LIB=/opt/drizzle/lib Nginx编译选项如下，请注意先后顺序：
./configure --prefix=/opt/nginx \  --with-pcre=../pcre \  --add-module=../ngx_devel_kit \  --add-module=../set-misc-nginx-module \  --add-module=../memc-nginx-module \  --add-module=../echo-nginx-module \  --add-module=../lua-nginx-module \  --add-module=../srcache-nginx-module \  --add-module=../drizzle-nginx-module \  --add-module=.</description>
    </item>
    
    <item>
      <title>auto-xhprof PHP自动性能测试工具</title>
      <link>http://chenxiaoyu.org/2011/09/15/php-auto-xhprof/</link>
      <pubDate>Thu, 15 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/09/15/php-auto-xhprof/</guid>
      <description>auto-xhprof 项目地址： https://github.com/smallfish/auto-xhprof
最近需要对一些PHP应用和底层函数进行一些排错和性能方面的分析，不由得想起xhprof这个小强的利器。
当然也可以按照官方的示例来监控应用或者页面的数据，使用起来还是有点不爽。比如想监控所有访问超过2秒的页面性能情况，或者自动打开/关闭分析，请求url、响应时间等。
随手基于xhprof写了一个扩展小工具。
主要思路如下：
通过修改php.ini中的auto_prepend_file可以预加载auto-xhprof.php，自动打开xhprof功能。 ;php.ini auto_prepend_file = &amp;#39;/path/prepend.php&amp;#39; ; &amp;lt;?php ; include_once &amp;#39;/path/auto-xhprof.php&amp;#39;; ; ?&amp;gt; 主要功能点有如下：
 参数配置是否自动开启xhprof。 参数配置超时的阀值，比如2秒。 保存分析后的数据到MySQL中，供集中统一分析。 数据内容含：请求的URL、相应时间。 支持gearman异步保存数据。 提供封装的xhprof_start/xhprof_end对部分程序进行手动分析。 自动记录错误信息  图一（列表显示）： 图二（部分函数显示）： 源码文件说明：
auto-xhprof.php 全局加载文件。 auto-xhprof-config.php 全局配置文件，设置MySQL数据库和参数等。 gearman-worker.php gearman后台处理worker进程。 web/ web显示目录，xhprof列表页面和原xhprof展示部分 xhprof_lib/ xhprof库文件。 &amp;mdash;&amp;mdash;&amp;mdash; 扩展安装步骤 &amp;mdash;&amp;mdash;&amp;mdash;
 编译xhprof.so扩展 % cd &amp;lt;xhprof_source_directory&amp;gt;/extension/ % phpize % ./configure --with-php-config=&amp;lt;path to php-config&amp;gt; % make % make install
 修改php.ini中extension，以支持xhprof扩展 [xhprof] extension=xhprof.so xhprof.output_dir=&amp;lt;directory&amp;gt; ; 需要有写入权限，可以写/tmp，或者不设置
 从github上下载auto-xhprof，并配置。 1.</description>
    </item>
    
    <item>
      <title>supervisor - Python进程管理工具</title>
      <link>http://chenxiaoyu.org/2011/05/31/python-supervisor/</link>
      <pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/05/31/python-supervisor/</guid>
      <description>经常会碰到要写一些守护进程，简单做法放入后台：
shell&amp;gt; nohup python xxx.py &amp;amp; 偶尔这么做还可以接受，如果一堆这样的呢？
当然还有一个问题，就是各种服务，对应的命令或者路径都不太一致，比如Apache、MySQL或者其他自行编译的工具。
如果可以统一管理这些应用，是不是很哈皮？
按照惯例现Google一把，不失所望找到一个神奇的利器。supervisor！
supervisor地址：http://supervisord.org，官方标语就是：一个进程管理工具。
安装：
shell&amp;gt; sudo aptitude install supervisor # pip/easy_install 也可以通过其他包管理来安装，比如apt/yum等。
安装好以后，有两个可执行文件和一个配置文件（平台差异，可能路径不一致）：
/usr/bin/supervisord -- supervisor服务守护进程 /usr/bin/supervisorctl -- supervisor服务控制程序，比如：status/start/stop/restart xx 等 /etc/supervisor/supervisord.conf -- 配置文件，定义服务名称以及接口等等 下面来一个示例，用web.py写一个hello的程序：
import web urls = ( &amp;#39;/(.*)&amp;#39;,&amp;#39;hello&amp;#39; ) app = web.application(urls, globals()) class hello: def GET(self, name): return &amp;#39;hello: &amp;#39; + name if __name__ == &amp;#39;__main__&amp;#39;: app.run()  这个时候可以直接启动这个程序了，下面来配置supervisor，加入管理。修改supervisord.conf，加入如下片段：
[program:hello] command=python /home/smallfish/hello.py autorstart=true stdout_logfile=/home/smallfish/hello.log 上面的意思应该很容易懂，program后面跟服务的名称，command是程序的执行路径，autorstart是表示自动启动，stdout_logfile是捕获标准输出。
到这里，基本搞定了，下面就是启动管理：
shell&amp;gt; sudo /etc/init.</description>
    </item>
    
    <item>
      <title>pythonbrew - Python多版本管理利器</title>
      <link>http://chenxiaoyu.org/2011/04/03/multi-python-manage-pythonbrew/</link>
      <pubDate>Sun, 03 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/04/03/multi-python-manage-pythonbrew/</guid>
      <description>相信不少人在自己机器上有多个Python版本，我的机器上Python有四个版本：2.5.x、2.6.x、2.7和stackless。
测试Google App Engine时候需要切换到2.5，正式调试时候回归到2.6，自己玩的时候会选择2.7或者stackless，每次都是通过bash profile来调整，或者手动加link。真麻烦那。。。
无意间看到有一个Perl版本的brew工具：http://search.cpan.org/~gugod/App-perlbrew-0.18/bin/perlbrew！
安装：
$ easy_install pythonbrew $ pythonbrew_install # 或手动下载 $ curl -kLO http://github.com/utahta/pythonbrew/raw/master/pythonbrew-install $ chmod +x pythonbrew-install $ ./pythonbrew-install 把 source /xxx/.pythonbrew/etc/bashrc 加入到自己profile或者bashrc中去（xxx是自己的用户目录）
pythonbrew 常用命令如下：
install 安装版本：
$ pythonbrew install 2.6.6 过程可以参考安装日志：~/.pythonbrew/log/build.log 如果最后看到make error失败，应该是test过程失败。可以采取： $ pythonbrew install --force 2.6.6
switch 选择版本：
$ pythonbrew switch 2.6.6 list 查看版本：
$ pythonbrew list # 列出目前已安装的版本 pythonbrew list -k # 列出可以下载和安装的版本 uninstall 卸载版本：
$ pythonbrew uninstall 2.6.6 参数还是很简单的。详见help或者http://pypi.python.org/pypi/pythonbrew/。</description>
    </item>
    
    <item>
      <title>2010 – 继续前行的路上</title>
      <link>http://chenxiaoyu.org/2011/02/19/my-2010/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/my-2010/</guid>
      <description>每一天都在前行的路上，而这一年似乎去的特别的快，特别的短暂。
一年的时间辗转三个城市，从南京到杭州，再到上海。一切的一切似乎都是昨天，那般的清晰。
其实很早就想离开工作快五年的公司，只不过是自己一直下不了决心。性格和患得患失一直左右着自己的思绪。时间的流逝，青春不再，或许再过些时间，或许什么都不是了。
偶然的机会，很荣幸的进入淘宝工作。能够从自己的小圈子走出来，去接触外面的世界。短短的几个月中，成长的内容明显的超过了前几年的积累。这不仅仅是技术的成长，更多的是人，是视野，是想法。这一切的一切，都得感谢淘宝的师兄和主管。回想前几年，自己的世界里只有去完成一些事情，而现在更多的是应该觉得自己主动解决一些事情。当然，沟通上面来的更为明显。程序久了，思维的方式都会定死，而接触其他的岗位，去了解他们人的思路和想法，很多思绪都会豁然开朗。
杭州之行匆匆而逝，来到了大上海，这个充满魔力和摩登的都市。说真的，自己尚未体会。换了新环境，适应是必须的。在试用期内很快直接切入项目，几个月很快过去了。虽然在一些问题上自己不能决定什么，但是还是很幸运，可以从项目最初的雏形，到现在已经测试发布，自己都在其中。其实这个正是自己所擅长的。我想的就是自己能够决定更多，能够参与的更多，当然，或许这个可能性还需要自己去努力，或许现实总是那般无力，或许。
一年的流水账，想说，并不容易。希望自己一直能够如此前行，走自己的路，知道自己需要什么，能够得到什么。足矣。
零点的钟声已过，回忆这一年，许许多多的人，给了自己很多很多的帮助，感谢一下。
何伟平：很感谢何老师的推荐，才能有机会进入淘宝这样的大公司。何老师的谦虚和热心，很值得自己去学习。很遗憾，至今未有机会请何老师吃顿饭。 康伯：在淘宝时候我的主管。很感谢他跟自己多次的交流，有想法就说，就交流。给了自己很多机会。他是我至今为止唯一一个在系统方面很膜拜的人。 大舞：淘宝入职时候的师兄。试用期内给了自己很多建议和指导，一个很帅很帅的男人。@kemin_ukl 春哥：非芒果台的那位。感谢春哥推荐了自己来盛大，还混了不少饭，春哥工作和生活的太多很值得码农学习和借鉴。@mcspring 道神：灰常牛叉的DD，感谢刚来魔都时候收留了俺这个码农。回头还要多搭讪，求其在Debian方面的经验。@lidaobing 群众：鄙人群里那些哥们，你们都是神一样的男人！因为有了你们，才有了欢乐！@marchliu @xiaoxiaolu @guangfengio 等等大牛们。 话不多说，祝愿那些把帮助和关心过我的人，新年能够身体健康，幸福快乐！
去迎接新的一年，我，继续在路上。
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>PostgreSQL Key-Value 数据类型 hstore 使用教程</title>
      <link>http://chenxiaoyu.org/2011/02/19/postgresql-key-value-hstore/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/postgresql-key-value-hstore/</guid>
      <description>现在满地都是KV数据库的文字，PostgreSQL 也有类似的结构。不过是通过其强大的扩展方式实现的。
官网文档请参考：http://www.postgresql.org/docs/current/static/hstore.html
本文测试环境在 Mac OS 下，Pg采用源码编译。
编译 hstore 扩展
mac:~ smallfish$ cd Downloads/postgresql-9.0.1/contrib/hstore/ mac:hstore smallfish$ make ... 一堆编译信息 mac:hstore smallfish$ sudo make install 导入到数据库中，注意必须以 postgres 用户，如果需要装入到指定数据库，请指明。这里采用默认数据库。
mac:hstore smallfish$ ls /opt/postgresql/share/contrib/ hstore.sql	uninstall_hstore.sql mac:hstore smallfish$ psql -U postgres -f /opt/postgresql/share/contrib/hstore.sql ... 一堆导入命令 进入数据库，建一个测试表
postgres=# CREATE TABLE testhstore (id SERIAL, value hstore); NOTICE: CREATE TABLE will create implicit sequence &amp;#34;testhstore_id_seq&amp;#34; for serial column &amp;#34;testhstore.id&amp;#34; CREATE TABLE
查看下表结构
postgres=# \d List of relations Schema | Name | Type | Owner --------+-------------------+----------+---------- public | testhstore | table | postgres public | testhstore_id_seq | sequence | postgres (2 rows) postgres=# \d testhstore; Table &amp;#34;public.</description>
    </item>
    
    <item>
      <title>Pylons 入门实例教程 – 发布应用</title>
      <link>http://chenxiaoyu.org/2011/02/19/pylons-tutorial-deploy-application/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/pylons-tutorial-deploy-application/</guid>
      <description>前面几篇教程简单讲述了如何使用 Pylons 进行 WEB 方面开发的步骤，包括简单的 Hello、表单和数据库操作等内容。本篇将描述一下如何在正式环境中发布基于 Pylons 的 WEB 应用。
测试环境：Nginx 0.8.53 + FastCGI 模式 （需要安装 flup 模块）
pip install flup # easy_install -U flup 测试代码，延用前面的 Hello 示例。
mac:python smallfish$ paster create -t pylons hello mac:python smallfish$ cd hello/ mac:hello smallfish$ paster controller hi mac:hello smallfish$ paster serve --reload development.ini 确保以上过程无错，访问：http://127.0.0.1:5000 可以看到默认页面。
好把，开始配置发布环境。 需要修改 development.ini 配置文件，找到 [server:main] 节点，修改其中的 use 方式（默认是 egg:Paste#http）。
[server:main] use = egg:PasteScript#flup_fcgi_thread host = 0.0.0.0 port = 5000 另外建议修改 [DEFAULT] 节点中 debug = false，以免错误会打印具体的环境和堆栈信息。</description>
    </item>
    
    <item>
      <title>Python Story</title>
      <link>http://chenxiaoyu.org/2011/02/19/python-story/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/python-story/</guid>
      <description>http://www.slideshare.net/nnfish/python-story
http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=pythonstory-100920035248-phpapp01&amp;amp;stripped_title=python-story&amp;amp;userName=nnfish</description>
    </item>
    
    <item>
      <title>互联网产品与技术的那些杂事儿</title>
      <link>http://chenxiaoyu.org/2011/02/19/web-application-and-tech/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/web-application-and-tech/</guid>
      <description>杂谈一下，我不是搞产品的也不是搞技术的，只是一个打杂的。随便扯谈一下。
作为一个产品，既然有这个名称，必定有其定位。在构思之前，就必须有明确的针对人群。比如是针对年轻人（80、90），抑或者上班族等等。模糊与笼统的定位，带来的只是无谓的“探索”。定位不是靠摸索出来的，也不是磨打出来的，是在你的脑海里，在你的产品里。即使现在模仿风气如此浓厚的时候，需要的也是定位。你的定位在哪儿，注定成就怎样的结果。
有了想法，下面就是一些调查和思考。你的这些针对人群在你的产品你会喜欢什么，会怎样的习惯？这个时候需要做的就是多和你的目标与非目标受众多去聊天，多去发觉他们的喜好与需求。或许你的改动只在某时一句话。所谓的走出去，这一步是必须的。闭门造车，最后可能出来就是一个自个儿意淫的杯具。
初期的实现与原型。很多时候喜欢在白板或者纸上写点什么，画点什么。记住！这一些都不能丢弃，或者擦掉。或许只是一些顺手涂鸦，或者解乏的简笔画。原型设计不需要一个完整的流程图，应该突出其顺序和关键点，以及部分UI的展示。这个过程中可以适当让受众面参与进来，设计出非自己主观的思路。
好吧，其实这些过程是可以修改和整合的。毕竟咱写的是互联网应用，不会给你完整的需求文档，完整的流程图，那样还叫互联网么？那是外包（无贬义，含笑）。
到现在为止应该糅合一些技术的关键字，比如哪些可以做到，哪些比较复杂。哪些技术可取，哪些可以折中。在考虑这个阶段的时候，技术人员需要的更多的是倾听，而不是纠结在某个环节，或者抵制某些习惯与思路。你可以说下自己的观点与想法，但是记住这些只是你自己的主观出发点，代表不了什么（如果正好受众面就是你，那恭喜了！）。需要做的就是记录下需求，转为脑海中虚拟的实现与流淌。一切心中有谱之后，可以适当“讨价还价”。毕竟每个人说出的都是自己的想法。
该画出流程图了。和上面原型一样，记住，别随意擦掉。用小人也可以，用箭头也可以，或者圆圈。你描述的只是过程，不是漫画和小说。当然加上这些元素会显得你的设计更加有爱。流程图的初衷在于走通整个流程，以及画出关键点。大致抽象出各个模型、结构和交互情况。适当写些文档把，这个总没有坏处的。或许这就是设计文档的初稿。
选型。有了需求，有了流程。下面当然是选择怎么去实现。说到用什么，仁者见仁，智者见智。啥好？啥不好？不是道听途说。关键在于自己。这些年来，喜欢的一句话就是：用自己熟悉的、用自己顺手的。看看外面的世界，好东西太多了，难不成有兴趣什么都来用一下？清醒吧哥们。你不是科学家，不是搞研究的。有这个时间，完全可以把你自己熟悉的搞的更透彻。这里并不是抵制新的或者好的工具，要明白一点，这些工具的作用域在哪儿，如果对自己实在可能起不到啥作用，或者只是存在你的假想中，放放把。未来再尝试也不迟。
关键点的实现与雏形。套句时髦的话，这个是不是应该算架构和设计？抽象出大致的模块，划分出结构。不必太在意其完整性和准确性，只要能走通就好。一次都给你写完了，其他人都去喝茶看报纸？雏形嘛，你懂得。当然，还得明确具体的工具，比如语言、数据库、系统等等。一个准则：用自己熟悉的，外加一条：简单就好。
是不是有了大体的架子了？可能下面就是大工作量的体力活啦。当然，分配体力活也是一个很体力的事情。没有一个好的管理者，这个产品就是大家拆东墙补西墙，互相推诿的产物。大致的职责有：传承需求和变化，分配与监察。消化和理解需求，确实是个跟天赋有关的事情，如果都是一个顺序跑下来的，那也不叫互联网了。需要很好的沟通能力，纸面或者口头的描述，随时可能千变万化，一成不变，继续去做外包把（囧）。分配这个环节就跟经验有关了，多去发觉你团队中的兴趣与擅长，用其长处，适当补短。合适的人干合适的事情，嘛效率？这就出来了。大家都在干活，进度就需要自己不断的监控与调整，适当多给自己宽裕的时间，哪怕只是那么一两小时。凡事没绝对，多想，多看，总是对的。
实现。设计数据库，写类库，写页面。详细罗列的话估计一长串。然后就是拆分逻辑，拆分页面，拆分功能点，然后就是与之对应的整合和补充。说到这边，可能就有人会说，用某某类库，或者某某框架，某某工具。这一切都建立在对其了解的基础上。不要太迷信，同样的刀在不同人手上是不一样的，用的好才是好刀，用不好连茅草都不如。折腾的滋味自己尝把。不是用了啥就牛逼，而是解决了啥，针对性的解决才是牛逼的关键。所有的一切，都只不过是实现的一种手段。条条大路，都可以。不要太迷信××，那只是一个传说。没有万能的实现，只有不断的解决与重新审视。实现细节滤过。。。
测试。不是写几个TestCase就是测试，那个只是证明你的代码看起来没啥问题，当然也不仅仅是用了啥测试框架，多专业。都只是辅助工具。除去功能性的测试，需要的是注意细节上。如果仅仅只是能用，没错没bug。这个不是产品，或许就是留言版。当然应该提供更多的可用性、流畅性以及体验。
唉，一不小心快十二点了，洗洗睡吧。未完再补充。
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>开源网页截屏工具 CutyCapt Linux 下安装和使用</title>
      <link>http://chenxiaoyu.org/2011/02/19/cutycapt-for-linux/</link>
      <pubDate>Sat, 19 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://chenxiaoyu.org/2011/02/19/cutycapt-for-linux/</guid>
      <description>目的是想在服务器端生成某个网页的缩略图。Google了好久，发现一个好开源东西：CutyCapt。
系统：CentOS 5.5 官网：http://cutycapt.sourceforge.net/ 依赖：QT http://www.qtsoftware.com/
首次是在Debian下测试的，很顺利。换了CentOS不是太爽。具体安装和使用步骤如下：
 下载RPM包  (64位) wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-4.4.3-10_4.el5.x86_64.rpm wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-x11-4.4.3-10_4.el5.x86_64.rpm wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-devel-4.4.3-10_4.el5.x86_64.rpm (32位) wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-4.4.3-10_4.el5.i386.rpm wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-x11-4.4.3-10_4.el5.i386.rpm wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-devel-4.4.3-10_4.el5.i386.rpm  安装 qt-devel 依赖包  yum install libXi-devel yum install libXinerama-devel
 安装 qt 相关  rpm -ivh qt44-4.4.3-10* rpm -ivh qt44-x11-4.4.3-10* # rpm -e qt-devel --nodeps --allmatches rpm -ivh qt44-devel-4.4.3-10*  修改 /etc/profile，最后并：source /etc/profile  export QTDIR=/usr/lib64/qt44 export QTLIB=/usr/lib64/qt44/lib export QTINC=/usr/lib64/qt44/include export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH export PATH=$QTDIR/bin:$PATH  安装 cutycapt  svn co https://cutycapt.</description>
    </item>
    
  </channel>
</rss>